// Responsive breakpoints mixin
@mixin add_variables( $view: frontend ) {

	@if frontend == $view {

		:root {
			@content;
		}
	}

	@if editor == $view {

		:root,
		body {
			@content;
		}
	}
}

// Estilo dos botões
// Este código é uma cópia do conteúdo da classe &
@mixin button-style() {
	--button-radius: 100em;
	--button-xsmall: 24px;
	--button-small: 32px;
	--button-medium: 40px;
	--button-large: 48px;
	--button-size: var(--button-medium);
	--interactive-rgb: var(--color-dark-rgb);
	background-color: var(--interactive);
	color: var(--color-dark);
	align-items: center;
	border: 0;
	border-radius: var(--button-radius);
	cursor: pointer;
	display: inline-flex;
	font-size: var(--font-size-scale-up-01);
	font-weight: var(--font-weight-semi-bold);
	height: var(--button-size);
	justify-content: center;
	overflow: hidden;
	padding: 0 var(--spacing-scale-3x);
	position: relative;
	text-align: center;
	vertical-align: middle;
	white-space: nowrap;
	width: auto;

	// Disabled Button colors
	&:disabled {
		cursor: not-allowed;
		opacity: var(--disabled);
	}

	&:not(:disabled) {
		--focus-offset: var(--spacing-scale-half);
	}
	&:not(:disabled):focus {
		outline: none;
	}
	&:not(:disabled).focus-visible,
	&:not(:disabled):focus-visible {
		outline-color: var(--focus);
		outline-offset: var(--focus-offset);
		outline-style: var(--focus-style);
		outline-width: var(--focus-width);
	}
	&:not(:disabled):not(:disabled):hover {
		background-image: linear-gradient(rgba(var(--interactive-rgb), var(--hover)), rgba(var(--interactive-rgb), var(--hover)));
	}
	&:not(:disabled):not(:disabled):active {
		background-image: linear-gradient(rgba(var(--interactive-rgb), var(--pressed)), rgba(var(--interactive-rgb), var(--pressed)));
	}
	&.active,
	&.is-active,
	&[active] {
		--hover: var(--hover-dark);
		background-color: var(--active);
		color: var(--color-dark);
	}
	&.loading::after,
	&[loading]::after,
	&.is-loading::after {
		border-color: var(--interactive) var(--interactive) transparent;
		border-style: solid;
	}
	&.loading.primary::after, 
	&.loading.danger::after, 
	&.loading.success::after, 
	&.loading.info::after, 
	&[loading].primary::after, 
	&[loading].danger::after, 
	&[loading].success::after, 
	&[loading].info::after, 
	&.is-loading.primary::after, 
	&.is-loading.danger::after, 
	&.is-loading.success::after, 
	&.is-loading.info::after {
		border-color: var(--background) var(--background) transparent;
	}
}

@mixin innerblock-margin-clear($container) {

	// Clear the top margin for the first-child.
	> #{$container} > *:first-child {
		margin-top: 0;
	}

	// Last child that is not the appender.
	> #{$container} > *:last-child:not(.block-list-appender) {
		margin-bottom: 0;
	}

	// When selected, the last item becomes the second last because of the appender.
	&.has-child-selected > #{$container} > *:nth-last-child(2),
	&.is-selected > #{$container} > *:nth-last-child(2) {
		margin-bottom: 0;
	}
}
